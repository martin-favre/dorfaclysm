✔ Figure out a way to render the map @done(19-12-27 21:10)
✔ Be able to scroll around in the map @done(19-12-27 21:09)
✔ Generate basic map (so you can see the tiles) @done(19-12-27 21:10)
✔ Add mineable walls @done(20-01-03 14:10)
✔ Add so when you click a wall, it gets added to the job pool @done(20-01-03 14:09)
✔ Find sprite for Dorf @done(20-01-02 17:40)
✔ Implement Dorf Job Structure @done(20-01-03 15:06)
    ✔ Add job Walk @done(19-12-29 18:14)
    ✔ Add job mine @done(20-01-03 14:09)
    ✔ Add job-pool @done(20-01-03 14:09)
✔ Refactoring: Tilefloor, replace using enums with children that just initializes their parent differently @done(20-01-03 15:05)
✔ Multiple clicks on a tile will create multiple jobs, even if it's the same one @done(20-01-03 17:12)
✔ Center sprite for Dorf @done(20-01-04 13:44)

☐ Add visual box when a wall is in the job pool
    Naive approach 
        2D-grid with booleans, same size as GridMap
        If the bool is set, render a brown see-through square
        Let GridMapRenderer render it

☐ Refactor : Construct DorfJobs from PlayerRequestedJobs
    Or even, let them be the same and just update them with more info once a Dorf takes it

☐ Make mined rocks drop items

☐ Re-build a rock with a dropped rock item

☐ Do not throw away jobs when they can't be completed

☐ Be able to zoom in/out of the map

☐ Need a way to handle "I want to be 1 square away away from this position" in pathfinding
    Naively just try all four squares around it?
    Make a wrapper in Astar for it?

☐ Idea: Use Streaming texture for the GridMapRenderer
    https://stackoverflow.com/questions/25214556/why-do-i-get-bad-performance-with-sdl2-and-sdl-rendercopy-inside-a-double-for-lo

☐ Idea: Instead of letting each gameobject do their own rendering, it could be done in GridMapRenderer, might save some performance
    Only render what's on the screen. 
    re-render only things that have changed.
    The pre-rendered texture will be reused. 
    Can take a copy of what's on the screen and render it async (maybe?)

☐ Idea: Make gridmap into pre-baked chunks
    Each chunk may be 16x16. 
    All exits are pre-cached.
    Astar will first be done across chunks to see if you can even get to your destination. 
       This will be done with normal Astar and just ask the chunks if I can move to the north/west/etc.
    If a wall gets chopped it will update that chunk.

☐ Idea: Make Astar async
    Possibly without locking GridMap.
    Then you basically generate up an estimate (I ought to go here)
    Then with each step you make sure it's still a valid path

